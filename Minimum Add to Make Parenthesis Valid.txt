/** Solution to the problem found here: https://leetcode.com/problems/minimum-add-to-make-parentheses-valid/
*
* Given a string S of '(' and ')' parentheses, we add the minimum number of parentheses ( '(' or ')', and in any positions ) so that the resulting parentheses string is valid.
* Formally, a parentheses string is valid if and only if:
*	It is the empty string, or
*       It can be written as AB (A concatenated with B), where A and B are valid strings, or
*       It can be written as (A), where A is a valid string.
* Given a parentheses string, return the minimum number of parentheses we must add to make the resulting string valid.
**/

class Solution {
public:
    int minAddToMakeValid(string s) {
        int valid = 0;
        if(s.empty()){
            return valid;
        }
       
        // It matters whether there is a ( before a ) , because ) ( is not valid while ( ) is
        // CAREFUL WITH THE CASES WHERE THERE IS FILLER INSIDE A VALID PARENTHESIS
        // Easier to find valids and then substract than calculate all possible invalid positions (valid is only one form)
        
        int curr = 0, amountLeftPar = 0;
        while(curr < s.size()){
         //   cout << s[curr] << " " << amountLeftPar << " " << valid << endl;
            if(s[curr] == '('){
                ++amountLeftPar;
            }else{
                if(amountLeftPar > 0){
                    --amountLeftPar;
                    valid += 2;
                }
            }

            ++curr;
        }
        
        return s.size() - valid;
    }
};